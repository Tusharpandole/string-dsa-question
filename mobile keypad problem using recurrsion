class Solution {
    private:
    void solve(string digit , string output , vector<string>&ans ,string mapping[],int index){
        //base case 
        if(index>=digit.length()){
            ans.push_back(output );
            return ;
        }
        //recurrence condtion 
        //type casting from character to int 
        int number = digit[index]-'0' ;
        string value = mapping[number] ;
        for(int i=0;i<value.length();i++){
            output.push_back(value[i]) ;
            solve(digit,output,ans , mapping , index+1) ;
            //for the back tracking 
            output.pop_back() ;
        }

    }
public:
    vector<string> letterCombinations(string digits) {
        vector<string>ans ;
        if(digits.length() ==0){
            return ans ;
        }
        string output="" ;
        int index = 0 ;
        string mapping[10] = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"} ;
        solve(digits , output , ans , mapping,index) ;
        return ans ;
    }
};
