#time complexity =O(nlogn) and space complexity =O(1)
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length()){return false ;}
       sort(s.begin(),s.end()) ;
       sort(t.begin(),t.end()) ;
       for(int i=0;i < s.length(); i++){
           if(s[i] != t[i]){
               return false ;
           }
       } 
       return true ;
    }
};


#second approach time complexity =O(N)
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length() != t.length()){return false ;}
       int freqs[26]={0}, freqt[26]={0} ;
       for(char ch:s)freqs[ch-'a']++ ;
       for(char ch:t)freqt[ch-'a']++ ;
       for(int i=0;i<26;i++){
           if(freqs[i] != freqt[i]){
               return false ;
           }
       }
       return true ;
    }
};
